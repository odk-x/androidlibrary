/**************************************************************************************************
 GRADLE CONFIG
 *************************************************************************************************/

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

libraryScripts.each {
    apply from: it
}

apply plugin: 'com.android.library'
apply plugin: "com.jfrog.artifactory"
apply plugin: "maven-publish"

group = groupId

android {

    // The following are set in the common.gradle file
    compileSdkVersion(compileVersion)
    buildToolsVersion(buildTools)
    defaultConfig {
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        versionCode(releaseVersionCode)
        versionName(versionCodeName)
        testInstrumentationRunner(instrumentationRunner)
    }

    // set by command line arguments
    defaultPublishConfig(gradle.ext.odkDefaultPublishConfig)

    flavorDimensions "stage", "testing"

    productFlavors {
        demo {
            dimension 'stage'
        }

        master {
            dimension 'stage'
        }

        snapshot {
            dimension 'stage'
        }

        basic {
            dimension 'testing'
        }

        uitest {
            minSdkVersion(uitestMinSDK)
            dimension 'testing'
        }
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            matchingFallbacks = ['debug']
        }
        debug {
            debuggable(true)
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
            matchingFallbacks = ['release']
        }
    }

    packagingOptions { // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
}


configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}


dependencies {
    api fileTree(include: '*.jar', dir: 'libs')
    api 'net.jcip:jcip-annotations:1.0'
    api 'com.android.support:support-annotations:27.1.0'
    api 'com.android.support:support-v4:27.1.0'

    api group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.4'
    api group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.4'
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'
    api group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.9.4'
    api group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.9.4'

    // Testing dependencies
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'

}

publishing {
    publications {
        aarRelease(MavenPublication) {}
        aarDebug(MavenPublication) {}
    }
    repositories {
        ivy {
            ivyPattern('[organisation]/[module]/[revision]/ivy-[revision].xml')
            artifactPattern('[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]')
        }
    }
}

task updateClassifierSnapshotBasic {
    doLast {
        bundleSnapshotBasicRelease.classifier snapshotRelease
        bundleSnapshotBasicDebug.classifier snapshotDebug

        publishing.publications.aarRelease.artifact bundleSnapshotBasicRelease
        publishing.publications.aarDebug.artifact bundleSnapshotBasicDebug

        project.getArtifacts().add("default", bundleSnapshotBasicDebug)
    }
}

task updateClassifierDemoBasic {
    doLast {
        bundleDemoBasicRelease.classifier demoRelease
        bundleDemoBasicDebug.classifier demoDebug

        publishing.publications.aarRelease.artifact bundleDemoBasicRelease
        publishing.publications.aarDebug.artifact bundleDemoBasicDebug

        project.getArtifacts().add("default", bundleDemoBasicDebug)
    }
}


task spawnSnapshotBasicArchives(dependsOn: ['snapshotVersion', 'assembleSnapshotBasicDebug',
                                            'assembleSnapshotBasicRelease', 'updateClassifierSnapshotBasic'])

task spawnDemoBasicArchives(dependsOn: ['snapshotVersion', 'assembleDemoBasicDebug',
                                            'assembleDemoBasicRelease', 'updateClassifierDemoBasic'])